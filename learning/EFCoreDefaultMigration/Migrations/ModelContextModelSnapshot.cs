// <auto-generated />
using System;
using EFCoreTPCMigration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreDefaultMigration.Migrations
{
    [DbContext(typeof(ModelContext))]
    partial class ModelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCoreTPCMigration.Models.Identity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "createdbyid");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdon");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "modifiedbyid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "modifiedon");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "ownerid");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OwnerId");

                    b.ToTable("Identity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Identity");

                    b
                        .UseTphMappingStrategy()
                        .HasAnnotation("Relational:JsonPropertyName", "owner");
                });

            modelBuilder.Entity("EFCoreTPCMigration.Models.SecurityGroup", b =>
                {
                    b.HasBaseType("EFCoreTPCMigration.Models.Identity");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "externalid");

                    b.Property<bool?>("IsBusinessUnit")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "isbusinessunit");

                    b.HasDiscriminator().HasValue("SecurityGroup");
                });

            modelBuilder.Entity("EFCoreTPCMigration.Models.User", b =>
                {
                    b.HasBaseType("EFCoreTPCMigration.Models.Identity");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "age");

                    b.Property<bool?>("AllowNotifications")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "allownotifications");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "birthday");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "externalid");

                    b.Property<string>("FieldMetadata")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "fieldmetadata");

                    b.Property<DateTime?>("FirstLogon")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "firstlogon");

                    b.Property<DateTime?>("LastLogon")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "lastlogon");

                    b.Property<string>("NemLoginRID")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "nemloginrid");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "phone");

                    b.Property<bool?>("ShouldResetPassword")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "shouldresetpassword");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.ToTable("Identity", t =>
                        {
                            t.Property("ExternalId")
                                .HasColumnName("User_ExternalId");
                        });

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("EFCoreTPCMigration.Models.Identity", b =>
                {
                    b.HasOne("EFCoreTPCMigration.Models.Identity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("EFCoreTPCMigration.Models.Identity", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("EFCoreTPCMigration.Models.Identity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Owner");
                });
#pragma warning restore 612, 618
        }
    }
}
